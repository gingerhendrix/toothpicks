{"version":3,"sources":["lib/pattern.ts","Pattern/Component.tsx","Pattern/Container.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Orientation","Point","x","y","Object","classCallCheck","this","createClass","key","value","other","xDiff","constructor","concat","PointMap","map","p","toString","ps","_this","forEach","add","Toothpick","center","orientation","horizontal","_this$ends","ends","_this$ends2","slicedToArray","first","last","Generation","toothpicks","flatMap","t","sort","a","b","compare","openEnds","i","length","equals","push","ToothpickPattern","points","generations","initializeFirstGeneration","_this2","filter","has","vertical","newToothpicks","newGeneration","addAll","lastGeneration","toothpick","gen","console","log","g","Line","_ref","_ref$ends","start","finish","current","react_default","createElement","x1","y1","x2","y2","style","stroke","transition","strokeWidth","React","memo","_ref2","generation","_ref2$current","Component_Line","Component","_ref4","pattern","size","scale","width","height","backgroundColor","transform","idx","Component_Generation","Container","useMemo","window","duration","max","_useState","useState","_useState2","frame","setFrame","frameRef","useRef","useEffect","interval","setTimeout","update","clearTimeout","useTick","buildNextGeneration","Pattern_Component","App","className","Pattern_Container","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bd555a20.chunk.js","sourcesContent":["\nexport class Point {\n  constructor(public x: number, public y: number) {\n  }\n\n  compare(other: Point) {\n    const xDiff = this.x - other.x;\n    if(xDiff === 0) {\n      return this.y - other.y;\n    }\n    return xDiff;\n  }\n\n  equals(other: Point | undefined) {\n    if(!other || other.constructor !== Point) {\n      return false;\n    }\n    return this.x === other.x && this.y === other.y;\n  }\n\n  toString() {\n    return `[${this.x}, ${this.y}]`;\n  }\n};\n\nexport class PointMap {\n  private map: Record<string, boolean>\n\n  constructor() {\n    this.map = {};\n  }\n\n  add(p: Point) {\n    this.map[p.toString()] = true;\n  }\n\n  addAll(ps: Point[]) {\n    ps.forEach(p => this.add(p))\n  }\n\n  has(p: Point) {\n    return this.map[p.toString()];\n  }\n}\n\nexport enum Orientation {\n  horizontal,\n  vertical,\n}\n\nconst invertOrientation = (o: Orientation) =>\n  o === Orientation.horizontal ? Orientation.vertical : Orientation.horizontal;\n\nexport class Toothpick {\n  constructor(public center: Point, public orientation: Orientation) {\n  }\n\n  ends(): [Point, Point] {\n    if (this.orientation === Orientation.horizontal) {\n      return [\n        new Point(this.center.x - 1, this.center.y),\n        new Point(this.center.x + 1, this.center.y),\n      ]\n    } else {\n      return [\n        new Point(this.center.x, this.center.y - 1),\n        new Point(this.center.x, this.center.y + 1),\n      ]\n    }\n  }\n\n  points(): [Point, Point, Point] {\n    const [first, last] = this.ends();\n    return [first, this.center, last];\n  }\n}\n\nexport class Generation {\n  constructor(public toothpicks: Array<Toothpick>, public orientation: Orientation) {\n  }\n\n  public openEnds(): Array<Point> {\n    const ends = this.toothpicks.flatMap(t => t.ends()).sort((a, b) => a.compare(b));\n    const openEnds = [];\n    for(let i = 0; i < ends.length ; i++) {\n      if(ends[i].equals(ends[i + 1])) {\n        i++;\n        continue;\n      }\n      openEnds.push(ends[i]);\n    }\n    return openEnds;\n  }\n}\n\nexport class ToothpickPattern {\n  private points: PointMap;\n\n  public generations: Array<Generation> = [];\n\n  constructor() {\n    this.points = new PointMap();\n    this.initializeFirstGeneration();\n  }\n\n  public buildNextGeneration() {\n    const last = this.generations[this.generations.length - 1];\n    const ends = last.openEnds().filter(p => !this.points.has(p));\n    const orientation = invertOrientation(last.orientation);\n    const newToothpicks = ends.map(p => new Toothpick(p, orientation));\n    const newGeneration = new Generation(newToothpicks, orientation);\n    this.points.addAll(this.lastGeneration().toothpicks.flatMap(t => t.points()));\n    this.generations.push(newGeneration);\n  }\n\n  public lastGeneration() {\n    return this.generations[this.generations.length - 1];\n  }\n\n  private initializeFirstGeneration() {\n    const toothpick = new Toothpick(new Point(0, 0), Orientation.vertical);\n    const gen = new Generation([toothpick], Orientation.vertical);\n    this.generations.push(gen);\n  }\n\n  public debug() {\n    console.log(\"Points\", this.points);\n    console.log(\"Generations\", this.generations.map(g => g.toothpicks));\n  }\n}\n","import React from 'react';\nimport {Generation as ToothpickGeneration, ToothpickPattern, Point} from '../lib/pattern';\n\nconst Line: React.FC<{ends: [Point, Point], current: boolean}> = ({ends: [start, finish], current}) =>\n  <line x1={start.x} y1={start.y} x2={finish.x} y2={finish.y} style={{\n    stroke: current ? 'rgb(0,0,255)' : 'rgb(0,255,0)',\n    transition: 'stroke 4s',\n    strokeWidth:  0.5,\n  }} />\n\nconst GenerationBase: React.FC<{generation: ToothpickGeneration, current: boolean}> = ({generation, current=false}) => (\n  <g>\n    {\n      generation.toothpicks.map(toothpick =>\n        <Line ends={toothpick.ends()} key={toothpick.center.toString()} current={current} />\n      )\n    }\n  </g>\n);\n\nconst Generation = React.memo(GenerationBase);\n\nexport const BoundingBox: React.FC<{gen: number}> = ({gen}) => {\n  const x = -(gen/2);\n  const y = -(gen/2);\n  const width = gen;\n  const height = gen;\n  const style = {\n    stroke: \"red\",\n    strokeWidth: 0.5,\n    fill: \"none\",\n  }\n\n  return <rect x={x} y={y} width={width} height={height} style={style} />\n};\n\ninterface ComponentProps {\n  pattern: ToothpickPattern,\n  size: number,\n  scale: number,\n}\n\nconst Component: React.FC<ComponentProps> = ({pattern, size, scale}) => (\n  <svg width={size} height={size} style={{backgroundColor: 'black'}}>\n    <g transform={`translate(${size/2}, ${size/2}) scale(${scale})`} >\n    {\n      pattern.generations.map((generation, idx) =>\n        <Generation generation={generation} key={idx} current={idx === pattern.generations.length - 1} />\n      )\n    }\n    </g>\n  </svg>\n);\n\n\nexport default Component;\n","import React, {useMemo, useState, useRef, useEffect} from 'react';\nimport {ToothpickPattern} from '../lib/pattern';\nimport Component from './Component';\n\nconst useTick = (duration: number, max: number) => {\n  const [frame, setFrame] = useState(1);\n  const frameRef = useRef(frame);\n  useEffect(() => {\n    const update = () => {\n      frameRef.current = frameRef.current + 1;\n      setFrame(frameRef.current);\n      if(frameRef.current < max) {\n        window.setTimeout(update, duration);\n      }\n    }\n    const interval = window.setTimeout(update, duration);\n    return () => window.clearTimeout(interval);\n  }, [duration, max]);\n\n  return frame;\n}\n\nconst Container: React.FC = () => {\n  const pattern = useMemo(() => {\n    const pattern = new ToothpickPattern();\n    (window as any).pattern = pattern;\n    return pattern;\n  }, []);\n\n  const tick = useTick(100, 1000)\n  if(tick > pattern.generations.length) {\n    pattern.buildNextGeneration();\n  }\n  const size = 800;\n  const scale = (0.9*size)/pattern.generations.length;\n\n  return <Component pattern={pattern} size={size} scale={scale} />;\n}\n\nexport default Container;\n","import React from 'react';\nimport Pattern from './Pattern';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <h1>Toothpick Patterns</h1>\n      <Pattern />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}